user nginx;
worker_processes auto;

pid /var/run/nginx.pid;
error_log /dev/stdout info;
worker_rlimit_nofile  100000;

events {
    worker_connections  4000;
    use  epoll;
    multi_accept  on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /dev/stdout;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;
    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    # request timed out -- default 60
    client_body_timeout 10;
    # if client stop responding, free up memory -- default 60
    send_timeout 2;
    # server will close connection after this time -- default 75
    keepalive_timeout 30;
    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;
    server_tokens  off;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    server {
        server_name xfenix.ru;
        listen [::]:443 ssl http2 ipv6only=on;
        listen 443 ssl http2;
        ssl_certificate /etc/letsencrypt/live/xfenix.ru/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/xfenix.ru/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
        set $web_root /srv/www/;

        location / {
            etag on;
            expires 1y;
            add_header Cache-Control public;
            access_log off;
            add_header Access-Control-Allow-Origin *;
            root $web_root;
            try_files $uri @index =404;
        }

        location @index {
            add_header Cache-Control public;
            etag on;
            expires 3d;
            access_log off;
            root $web_root;
            index index.html;
        }

        location /api/ {
            proxy_pass http://back:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            break;
        }
    }

    server {
        listen 80;
        listen [::]:80;
        server_name xfenix.ru;

        location /.well-known {
            try_files $uri $uri/ =404;
        }

        location / {
            return 301 https://$host$request_uri;
        }

        return 404;
    }
}
